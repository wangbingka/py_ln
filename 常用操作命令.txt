vim *.txt 创建文件并编辑
vi * 打开*文件
touch * 创建*文件
:wq 保存退出
:q 不保存退出
i 进入编辑模式
按esc键 退出编辑模式
ls 查看当前文件夹下未隐藏文件
ls -a 查看隐藏的文件
cd .. 退到上一层
cd \ 回到跟目录

mkdir * 创建文件夹
rm -rf /var/log/httpd/access
将会删除/var/log/httpd/access目录以及其下所有文件、文件夹


删除文件使用实例：
rm -f /var/log/httpd/access.log
将会强制删除/var/log/httpd/access.log这个文件

安装一个不同版本的python
现在我们假设你需要python3来编译程序，但是你不想覆盖掉你的python2.7来升级，你可以创建并激活一个名为snakes的环境，并通过下面的命令来安装最新版本的python3：
conda create -n snakes python=３
激活环境
·Linux，OS X：source activate snakes
·Windows： activate snakes
注销该环境
当你完成了在snowflakes环境中的工作室，注销掉该环境并转换你的路径到先前的状态：
·Linux，OS X：source deactivate
·Windows：deactivate




1. git add 添加 多余文件 
 这样的错误是由于， 有的时候 可能 

git add . （空格+ 点） 表示当前目录所有文件，不小心就会提交其他文件

git add 如果添加了错误的文件的话

撤销操作 

git status 先看一下add 中的文件 
git reset HEAD 如果后面什么都不跟的话 就是上一次add 里面的全部撤销了 
git reset --HEAD XXX/XXX/XXX.java 就是对某个文件进行撤销了

2. git commit 错误

如果不小心 弄错了 git add后 ， 又 git commit 了。 
 先使用 
git log 查看节点 
commit xxxxxxxxxxxxxxxxxxxxxxxxxx 
 Merge: 
 Author: 
 Date: 

然后 
git reset commit_id

over

PS：还没有 push 也就是 repo upload 的时候

git reset commit_id （回退到上一个 提交的节点 代码还是原来你修改的） 
git reset –hard commit_id （回退到上一个commit节点， 代码也发生了改变，变成上一次的）

3.如果要是 提交了以后，可以使用 git revert

还原已经提交的修改 
 此次操作之前和之后的commit和history都会保留，并且把这次撤销作为一次最新的提交 
git revert HARD 撤销前一次 commit 
 git revert HARD^ 撤销前前一次 commit 
 git revert commit-id (撤销指定的版本，撤销也会作为一次提交进行保存） 
git revert是提交一个新的版本，将需要revert的版本的内容再反向修改回去，版本会递增，不影响之前提交的内容。


方法1：如果你想保留刚才本地修改的代码，并把git服务器上的代码pull到本地（本地刚才修改的代码将会被暂时封存起来）
[plain] view plain copy 
1.git stash  
2.git pull origin master  
3.git stash pop  
如此一来，服务器上的代码更新到了本地，而且你本地修改的代码也没有被覆盖，之后使用add，commit，push 命令即可更新本地代码到服务器了。


方法2、如果你想完全地覆盖本地的代码，只保留服务器端代码，则直接回退到上一个版本，再进行pull：
[plain] view plain copy 
1.git reset --hard  
2.git pull origin master  

注：其中origin master表示git的主分支。

